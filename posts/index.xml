<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on NagaChaitanya Vellanki&#39;s blog</title>
    <link>https://chaitanyav.github.io/posts/</link>
    <description>Recent content in Posts on NagaChaitanya Vellanki&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://chaitanyav.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>From, Into traits</title>
      <link>https://chaitanyav.github.io/posts/from_into/</link>
      <pubDate>Thu, 07 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://chaitanyav.github.io/posts/from_into/</guid>
      <description>Let&amp;rsquo;s say we have a user-defined type Point defined as follows
struct Point { x: i32, y: i32, } and we want a String or &amp;amp;str of the form &amp;quot;(1,2)&amp;quot; to be converted into Point type. We need to implement the From trait on the Point type so that we can do something like
let p: Point = Point::from(String::from(&amp;#34;(1,2)&amp;#34;)); or
let p: Point = Point::from(&amp;#34;(1,2)&amp;#34;); The rust std library documentation says only to implement From since From&amp;lt;T&amp;gt; for U implies Into&amp;lt;U&amp;gt; for T which means by implementing the From trait on the Point type, we can make use of the standard library implementation of the Into trait.</description>
    </item>
    
    <item>
      <title>Iterators on user-defined types, Part-1</title>
      <link>https://chaitanyav.github.io/posts/iterators-1/</link>
      <pubDate>Sun, 03 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://chaitanyav.github.io/posts/iterators-1/</guid>
      <description>Let&amp;rsquo;s say we have a user-defined type Dictionary which is defined as follows:
struct Dictionary { words: Vec&amp;lt;String&amp;gt;, } impl Dictionary { fn new() -&amp;gt; Self { Dictionary { words: Vec::new() } } fn insert(&amp;amp;mut self, val: String) { self.words.push(val); } } We would like to implement an iterator on our Dictionary type so that we can loop over all the words in the dictionary like
let mut dict = Dictionary::new(); dict.</description>
    </item>
    
    <item>
      <title>Operator overloading in Rust</title>
      <link>https://chaitanyav.github.io/posts/operator_overloading/</link>
      <pubDate>Fri, 01 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://chaitanyav.github.io/posts/operator_overloading/</guid>
      <description>Let&amp;rsquo;s say we have a user-defined type Rational defined as follows:
#[derive(Debug)] struct Rational { num: i32, den: i32, } In order to support arithmetic operators like (+, -, /, *) on Rational, we would have to implement the Add, Sub, Div, Mul traits on Rational from the Rust standard library. To implement the Add trait on Rational, we need to provide an implementation for the add method from the Add trait.</description>
    </item>
    
    <item>
      <title>How to compare user defined types in Rust</title>
      <link>https://chaitanyav.github.io/posts/comparing_user_defined_types/</link>
      <pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://chaitanyav.github.io/posts/comparing_user_defined_types/</guid>
      <description>Let&amp;rsquo;s just say we have a user-defined type Person defined as follows:
pub struct Person { name: String, age: i32 } We need to compare two Persons mat, mac defined as follows:
let mat: Person = Person{name: String::from(&amp;#34;Mat&amp;#34;), age: 30}; let mac: Person = Person{name: String::from(&amp;#34;Mac&amp;#34;), age: 35}; We cannot just do mat == mac or mat != mac. We have to define what equality means for the type Person. We can do this in two ways.</description>
    </item>
    
    <item>
      <title>Writing Man Pages</title>
      <link>https://chaitanyav.github.io/posts/man_pages/</link>
      <pubDate>Sat, 19 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chaitanyav.github.io/posts/man_pages/</guid>
      <description>I am writing about my experience working with man pages today. I have never written/updated any man pages in the past. The man page i updated was intro(3) of the FreeBSD Library Functions Manual.
Updating the man page involved going through the FreeBSD source code src/lib and figuring out the libraries that exist. I came across many libraries which i had never heard of e.g. Performance Counters Library pmc(3) ðŸ˜².And i had to find out which of those libraries have a man page so that they can be listed.</description>
    </item>
    
  </channel>
</rss>
