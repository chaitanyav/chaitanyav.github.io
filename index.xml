<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NagaChaitanya Vellanki&#39;s blog</title>
    <link>https://chaitanyav.github.io/</link>
    <description>Recent content on NagaChaitanya Vellanki&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://chaitanyav.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>From, Into traits</title>
      <link>https://chaitanyav.github.io/posts/from_into/</link>
      <pubDate>Thu, 07 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://chaitanyav.github.io/posts/from_into/</guid>
      <description>Let&amp;rsquo;s say we have a user-defined type Point defined as follows
struct Point { x: i32, y: i32, } and we want a String or &amp;amp;str of the form &amp;quot;(1,2)&amp;quot; to be converted into Point type. We need to implement the From trait on the Point type so that we can do something like
let p: Point = Point::from(String::from(&amp;#34;(1,2)&amp;#34;)); or
let p: Point = Point::from(&amp;#34;(1,2)&amp;#34;); The rust std library documentation says only to implement From since From&amp;lt;T&amp;gt; for U implies Into&amp;lt;U&amp;gt; for T which means by implementing the From trait on the Point type, we can make use of the standard library implementation of the Into trait.</description>
    </item>
    
    <item>
      <title>Iterators on user-defined types, Part-1</title>
      <link>https://chaitanyav.github.io/posts/iterators-1/</link>
      <pubDate>Sun, 03 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://chaitanyav.github.io/posts/iterators-1/</guid>
      <description>Let&amp;rsquo;s say we have a user-defined type Dictionary which is defined as follows:
struct Dictionary { words: Vec&amp;lt;String&amp;gt;, } impl Dictionary { fn new() -&amp;gt; Self { Dictionary { words: Vec::new() } } fn insert(&amp;amp;mut self, val: String) { self.words.push(val); } } We would like to implement an iterator on our Dictionary type so that we can loop over all the words in the dictionary like
let mut dict = Dictionary::new(); dict.</description>
    </item>
    
    <item>
      <title>Operator overloading in Rust</title>
      <link>https://chaitanyav.github.io/posts/operator_overloading/</link>
      <pubDate>Fri, 01 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://chaitanyav.github.io/posts/operator_overloading/</guid>
      <description>Let&amp;rsquo;s say we have a user-defined type Rational defined as follows:
#[derive(Debug)] struct Rational { num: i32, den: i32, } In order to support arithmetic operators like (+, -, /, *) on Rational, we would have to implement the Add, Sub, Div, Mul traits on Rational from the Rust standard library. To implement the Add trait on Rational, we need to provide an implementation for the add method from the Add trait.</description>
    </item>
    
    <item>
      <title>How to compare user defined types in Rust</title>
      <link>https://chaitanyav.github.io/posts/comparing_user_defined_types/</link>
      <pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://chaitanyav.github.io/posts/comparing_user_defined_types/</guid>
      <description>Let&amp;rsquo;s just say we have a user-defined type Person defined as follows:
pub struct Person { name: String, age: i32 } We need to compare two Persons mat, mac defined as follows:
let mat: Person = Person{name: String::from(&amp;#34;Mat&amp;#34;), age: 30}; let mac: Person = Person{name: String::from(&amp;#34;Mac&amp;#34;), age: 35}; We cannot just do mat == mac or mat != mac. We have to define what equality means for the type Person. We can do this in two ways.</description>
    </item>
    
    <item>
      <title>Writing Man Pages</title>
      <link>https://chaitanyav.github.io/posts/man_pages/</link>
      <pubDate>Sat, 19 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chaitanyav.github.io/posts/man_pages/</guid>
      <description>I am writing about my experience working with man pages today. I have never written/updated any man pages in the past. The man page i updated was intro(3) of the FreeBSD Library Functions Manual.
Updating the man page involved going through the FreeBSD source code src/lib and figuring out the libraries that exist. I came across many libraries which i had never heard of e.g. Performance Counters Library pmc(3) 😲.And i had to find out which of those libraries have a man page so that they can be listed.</description>
    </item>
    
    <item>
      <title>Open Source</title>
      <link>https://chaitanyav.github.io/open_source/</link>
      <pubDate>Wed, 26 Aug 2020 20:28:26 -0700</pubDate>
      
      <guid>https://chaitanyav.github.io/open_source/</guid>
      <description>I like to contribute to open source, here are links to some of my tiny contributions 🙏
 FreeBSD  Reduce duplication in sys/*/include files Improve test coverage for sbuf   Scala tools, compiler (2.13.x)  CodePrinter prints backquote names Add doc string to Array.from   ffmpeg RubyGems  Fibonacci: a ruby c-extension to explore fibonacci series efficiently Partitions   RubyOnRails Contribution  </description>
    </item>
    
    <item>
      <title>Reading List</title>
      <link>https://chaitanyav.github.io/books/</link>
      <pubDate>Wed, 26 Aug 2020 20:28:26 -0700</pubDate>
      
      <guid>https://chaitanyav.github.io/books/</guid>
      <description>I read a lot, here is a list of some of the 📚 i have read and want to read or am currently reading. (Read = ✔️, Want to Read/Currently Reading = 📖 )
🗻 Mountaineering    🔗 Last Step: The American Ascent of K2 ✔️     🔗 K2: Life and Death on the World’s Most Dangerous Mountain ✔️     🔗 Into Thin Air by Jon Krakauer ✔️     🔗 The Call of The Ice: Climbing 8000-Meter Peaks in Winter ✔️     🔗 Mountains in My Heart: A Passion for Climbing ✔️     🔗 No Way Down: Life and Death on K2 ✔️     🔗 Challenge the Vertical (My Vertical World) ✔️     🔗 Beyond Possible: One Man, Fourteen Peaks, and the Mountaineering Achievement of a Lifetime ✔️   Biography/Memoir 🎾 👟 🏊‍♂️   🔗 Open: An Autobiography ✔️     🔗 Shoe Dog ✔️     🔗 Faster than Lightning: My Autobiography 📖     🔗 Beneath the Surface: My Story 📖     🔗 No Limits: The Will to Succeed 📖   📿 Spiritual   🔗 Apprenticed to a Himalayan Master: A Yogi&#39;s Autobiography ✔️     🔗 Autobiography of a Yogi ✔️    🦖 🐉  Fiction  🦕 ⚔️   🔗 A Knight of the Seven Kingdoms: A Song of Ice and Fire ✔️      🔗 The White Tiger: A Novel ✔️      🔗 Jurassic Park: A Novel ✔️     🔗 The Lost World: A Novel(Jurassic Park) ✔️   🇮🇳  India    🔗 Maximum City: Bombay Lost and Found ✔️     🔗 Behind the Beautiful Forevers: Life, Death, and Hope in a Mumbai Undercity ✔️     🔗 Veer Savarkar Father of Hindu Nationalism ✔️   💵 Business   🔗 American Icon: Alan Mulally and the Fight to Save Ford Motor Company ✔️     🔗 King of Capital: The Remarkable Rise, Fall, and Rise Again of Steve Schwarzman and Blackstone ✔️   🧑‍🚀 Space 🚀 🛰️ 🌌   🔗 How Apollo Flew to the Moon (Springer Praxis Books) 2nd ed.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://chaitanyav.github.io/about/</link>
      <pubDate>Fri, 08 May 2020 10:52:09 -0700</pubDate>
      
      <guid>https://chaitanyav.github.io/about/</guid>
      <description>I am a Software Engineer.
Links to my work:  OneUpFeeds My personal RSS feed reader CS229 Project: Separation of Speech From Noise Challenge SVD and its applications in image processing Balancing chemical equations using Gaussian Elimination Laplace Transform Application, Solving Differential Equations describing a projectile in motion Spam Classification using Naive Bayes  Used to be a Folding@Home contributor  Folding@Home Contribution  </description>
    </item>
    
    <item>
      <title>Diversions</title>
      <link>https://chaitanyav.github.io/diversions/</link>
      <pubDate>Fri, 08 May 2020 10:43:33 -0700</pubDate>
      
      <guid>https://chaitanyav.github.io/diversions/</guid>
      <description>కళ&amp;#3134;రవ&amp;#3135;, మహ&amp;#3134;ప&amp;#3149;రస&amp;#3149;థ&amp;#3134;న&amp;#3074; - శ&amp;#3149;ర&amp;#3136;శ&amp;#3149;ర&amp;#3136; ప&amp;#3147;న&amp;#3136;, ప&amp;#3147;న&amp;#3136;, ప&amp;#3147;త&amp;#3143; ప&amp;#3147;న&amp;#3136;! సత&amp;#3137;ల&amp;#3149;, స&amp;#3137;త&amp;#3137;ల&amp;#3149;, హ&amp;#3135;త&amp;#3137;ల&amp;#3149; ప&amp;#3147;న&amp;#3136;! ప&amp;#3147;త&amp;#3143; ప&amp;#3147;న&amp;#3136;! ర&amp;#3134;న&amp;#3136;, ర&amp;#3134;న&amp;#3136;,  వస&amp;#3149;త&amp;#3143; ర&amp;#3134;న&amp;#3136;! కష&amp;#3149;ట&amp;#3134;ల&amp;#3149;, నష&amp;#3149;ట&amp;#3134;ల&amp;#3149;, క&amp;#3147;ప&amp;#3134;ల&amp;#3149;, త&amp;#3134;ప&amp;#3134;ల&amp;#3149;, శ&amp;#3134;ప&amp;#3134;ల&amp;#3149; ర&amp;#3134;న&amp;#3136;! వస&amp;#3149;త&amp;#3143; ర&amp;#3134;న&amp;#3136;! త&amp;#3135;ట&amp;#3149;ల&amp;#3138;, ర&amp;#3134;ట&amp;#3149;ల&amp;#3138;, ప&amp;#3134;ట&amp;#3149;ల&amp;#3138;, ర&amp;#3134;న&amp;#3136;! ర&amp;#3134;న&amp;#3136;, ర&amp;#3134;న&amp;#3136;! క&amp;#3134;న&amp;#3136;, క&amp;#3134;న&amp;#3136;! గ&amp;#3134;న&amp;#3074;, ధ&amp;#3149;య&amp;#3134;న&amp;#3074;! హ&amp;#3134;స&amp;#3074;, ల&amp;#3134;స&amp;#3074;! క&amp;#3134;న&amp;#3136;, క&amp;#3134;న&amp;#3136;! కళ&amp;#3134;రవ&amp;#3136;, పవ&amp;#3136;! కవ&amp;#3136;!   </description>
    </item>
    
    <item>
      <title>Fractals</title>
      <link>https://chaitanyav.github.io/fractals/</link>
      <pubDate>Fri, 08 May 2020 10:35:27 -0700</pubDate>
      
      <guid>https://chaitanyav.github.io/fractals/</guid>
      <description>Note: All the fractals below are drawn using OpenGL/CUDA. Source code OpenGL, CUDA
  References:  http://www-user.uni-bremen.de/schmuhl/fractals/fractal_curves.html http://en.wikipedia.org/wiki/L-system http://en.wikipedia.org/wiki/Hilbert_curve http://en.wikipedia.org/wiki/Dragon_curve CUDA by Example: An Introduction to General-Purpose GPU Programming 1st Author: Jason Sanders, Edward Kandrot Pages: 312 Publisher: Addison-Wesley Professional ©2010 ISBN: 0131387685 9780131387683 The Nature of Code: Simulating Natural Systems with Processing Paperback – December 13, 2012 by Daniel Shiffman http://en.wikipedia.org/wiki/Gosper_curve http://en.wikipedia.org/wiki/Levy_C_curve http://www.malsys.cz/  Sierpinski Triangle    Hilbert Curve    Heighway Dragon   Twin Dragon   Ter Dragon   Fractal Plant     Islands and Lakes   Pentadentrite   Koch Snowflake   Sierpinski Carpet   Cantor Set   Julia Set   Mandelbrot Set   Circle Recursive   Cross-Stitch Curve   Box Fractal a.</description>
    </item>
    
    <item>
      <title>Origami</title>
      <link>https://chaitanyav.github.io/origami/</link>
      <pubDate>Fri, 08 May 2020 10:03:40 -0700</pubDate>
      
      <guid>https://chaitanyav.github.io/origami/</guid>
      <description>Models based on Geometric Origami by Faye E. Goldman  Decoration Unit, Icosahedron    Icosahedron    Tetrahedron    Octahedron(four equilateral triangles meeting a vertex)    Rhombic Triacontahedron (credit: Nagamani Vellanki (my mom))   Hexahedron   Dodecahedron    Truncated Tetrahedron   Egg (credit: Nagamani Vellanki (my mom))   Snub Dodecahedron (credit: Nagamani Vellanki (my mom))     Cuboctahedron (credit: Nagamani Vellanki (my mom))   Icosidodecahedron (credit: Nagamani Vellanki (my mom))  Models based on Wild &amp;amp; Wonderful origami by Mari Ono &amp;amp; Roshin Ono  Karasu(Crow)   Tsuru(Crane)     Kujira(Whale)   Tenntoumushi(Ladybird)   Semi(Cicida)   Hebi(Snake)   Kamereonn(Chameleon)   Kani(Crab)   Penguin   Umigame(Sea Turtle)   Chiita(Cheetah)   Kirin(Giraffe)   Cho(Butterfly)   Saru(Monkey)  ##Models based on Origami Farm by Mari Ono</description>
    </item>
    
  </channel>
</rss>
